#pragma once
#include "paddle_lite_factory_helper.h"

USE_LITE_KERNEL(transpose, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(transpose2, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(square, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(relu, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(leaky_relu, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(tanh, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(gelu, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(softsign, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(sigmoid, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(relu6, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(sqrt, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(rsqrt, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(mish, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(hard_swish, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(unsqueeze, kHost, kAny, kAny, def);
USE_LITE_KERNEL(unsqueeze2, kHost, kAny, kAny, def);
USE_LITE_KERNEL(split, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(split, kHost, kFloat, kNCHW, int32);
USE_LITE_KERNEL(split, kHost, kFloat, kNCHW, int64);
USE_LITE_KERNEL(split, kHost, kInt64, kNCHW, def);
USE_LITE_KERNEL(matrix_nms, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(stack, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(arg_max, kHost, kAny, kNCHW, fp32);
USE_LITE_KERNEL(arg_max, kHost, kAny, kNCHW, int64);
USE_LITE_KERNEL(arg_max, kHost, kAny, kNCHW, int32);
USE_LITE_KERNEL(arg_max, kHost, kAny, kNCHW, int16);
USE_LITE_KERNEL(arg_max, kHost, kAny, kNCHW, uint8);
USE_LITE_KERNEL(stack, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(stack, kHost, kFloat, kAny, int32_def);
USE_LITE_KERNEL(stack, kHost, kFloat, kAny, int64_def);
USE_LITE_KERNEL(lod_reset, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(sequence_concat, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(search_seq_depadding, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(ctc_align, kHost, kInt64, kNCHW, def);
USE_LITE_KERNEL(ctc_align, kHost, kInt32, kNCHW, def);
USE_LITE_KERNEL(lod_array_length, kHost, kAny, kAny, def);
USE_LITE_KERNEL(sequence_reshape, kX86, kInt64, kNCHW, def);
USE_LITE_KERNEL(sequence_reshape, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_unpad, kHost, kFloat, kAny, float32);
USE_LITE_KERNEL(sequence_unpad, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(fill_constant_batch_size_like, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(beam_search, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_expand, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_expand, kHost, kFloat, kNCHW, int32);
USE_LITE_KERNEL(sequence_expand, kHost, kFloat, kNCHW, int64);
USE_LITE_KERNEL(cos_sim, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(relu, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(leaky_relu, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(relu_clipped, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(prelu, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sigmoid, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(tanh, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(swish, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(relu6, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(log, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(exp, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(floor, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(hard_sigmoid, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(rsqrt, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(square, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(hard_swish, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(reciprocal, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(abs, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(thresholded_relu, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(elu, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(softplus, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(uniform_random, kHost, kAny, kAny, def);
USE_LITE_KERNEL(retinanet_detection_output, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(cast, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(prior_box, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_reverse, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_reverse, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(sequence_reverse, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(search_seq_fc, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(density_prior_box, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(correlation, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(roi_perspective_transform, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(expand, kHost, kAny, kAny, def);
USE_LITE_KERNEL(pad3d, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(fill_any_like, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(fill_zeros_like, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(yolo_box, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(meshgrid, kHost, kFloat, kAny, float32);
USE_LITE_KERNEL(meshgrid, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(dropout, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(index_select, kHost, kAny, kNCHW, fp32);
USE_LITE_KERNEL(index_select, kHost, kAny, kNCHW, int32);
USE_LITE_KERNEL(index_select, kHost, kAny, kNCHW, int16);
USE_LITE_KERNEL(index_select, kHost, kAny, kNCHW, int8);
USE_LITE_KERNEL(generate_proposals, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(read_from_array, kHost, kAny, kAny, def);
USE_LITE_KERNEL(instance_norm, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(cumsum, kHost, kFloat, kAny, float32);
USE_LITE_KERNEL(cumsum, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(cumsum, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(conditional_block, kHost, kAny, kAny, def);
USE_LITE_KERNEL(group_norm, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(unstack, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(unstack, kHost, kFloat, kAny, unstack_int32);
USE_LITE_KERNEL(shape, kHost, kAny, kAny, def);
USE_LITE_KERNEL(fetch, kHost, kAny, kAny, def);
USE_LITE_KERNEL(max_pool2d_with_index, kHost, kFloat, kNCHW, fp32);
USE_LITE_KERNEL(flatten_contiguous_range, kHost, kAny, kAny, def);
USE_LITE_KERNEL(im2sequence, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(grid_sampler, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(tril_triu, kHost, kAny, kNCHW, float32);
USE_LITE_KERNEL(write_back, kHost, kAny, kAny, write_back);
USE_LITE_KERNEL(matmul, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(squeeze, kHost, kAny, kAny, def);
USE_LITE_KERNEL(squeeze2, kHost, kAny, kAny, def);
USE_LITE_KERNEL(calib, kX86, kInt8, kNCHW, fp32_to_int8);
USE_LITE_KERNEL(calib, kX86, kInt8, kNCHW, int8_to_fp32);
USE_LITE_KERNEL(calib, kX86, kFloat, kNCHW, int32_to_fp32);
USE_LITE_KERNEL(calib, kX86, kFloat, kNCHW, fp32_to_int32);
USE_LITE_KERNEL(calib, kX86, kFloat, kNCHW, int32_to_int64);
USE_LITE_KERNEL(calib, kX86, kFloat, kNCHW, int64_to_int32);
USE_LITE_KERNEL(calib, kX86, kFloat, kNCHW, int64_to_fp32);
USE_LITE_KERNEL(calib_once, kX86, kInt8, kNCHW, fp32_to_int8);
USE_LITE_KERNEL(calib_once, kX86, kInt8, kNCHW, int8_to_fp32);
USE_LITE_KERNEL(calib_once, kX86, kFloat, kNCHW, int32_to_fp32);
USE_LITE_KERNEL(calib_once, kX86, kFloat, kNCHW, fp32_to_int32);
USE_LITE_KERNEL(calib_once, kX86, kFloat, kNCHW, int32_to_int64);
USE_LITE_KERNEL(calib_once, kX86, kFloat, kNCHW, int64_to_int32);
USE_LITE_KERNEL(calib_once, kX86, kFloat, kNCHW, int64_to_fp32);
USE_LITE_KERNEL(merge_lod_tensor, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(pixel_shuffle, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(unbind, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(unbind, kHost, kFloat, kNCHW, def_int64);
USE_LITE_KERNEL(assign_value, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(equal, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(equal, kHost, kInt64, kAny, def);
USE_LITE_KERNEL(equal, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(equal, kHost, kInt32, kAny, def);
USE_LITE_KERNEL(equal, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(not_equal, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(not_equal, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(not_equal, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(less_than, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(less_than, kHost, kInt32, kAny, def);
USE_LITE_KERNEL(less_than, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(less_than, kHost, kInt64, kAny, def);
USE_LITE_KERNEL(less_than, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(less_equal, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(less_equal, kHost, kInt64, kAny, def);
USE_LITE_KERNEL(less_equal, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(less_equal, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(greater_than, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(greater_than, kHost, kFloat, kAny, def_bool);
USE_LITE_KERNEL(greater_than, kHost, kFloat, kAny, def_int32);
USE_LITE_KERNEL(greater_than, kHost, kInt64, kAny, def);
USE_LITE_KERNEL(greater_than, kHost, kFloat, kAny, def_int64);
USE_LITE_KERNEL(greater_equal, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(greater_equal, kHost, kFloat, kAny, def_int64);
USE_LITE_KERNEL(greater_equal, kHost, kFloat, kAny, def_int32);
USE_LITE_KERNEL(scatter_nd_add, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(scatter_nd_add, kHost, kFloat, kNCHW, float32_int64);
USE_LITE_KERNEL(scatter_nd_add, kHost, kFloat, kNCHW, int32_int32);
USE_LITE_KERNEL(scatter_nd_add, kHost, kFloat, kNCHW, int32_int64);
USE_LITE_KERNEL(scatter_nd_add, kHost, kFloat, kNCHW, int64_int32);
USE_LITE_KERNEL(scatter_nd_add, kHost, kFloat, kNCHW, int64_int64);
USE_LITE_KERNEL(elementwise_add, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_add, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_add, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(fusion_elementwise_add_activation, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_sub, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_sub, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_sub, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(fusion_elementwise_sub_activation, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_mul, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_mul, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_mul, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(fusion_elementwise_mul_activation, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_div, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_div, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_div, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(fusion_elementwise_div_activation, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_floordiv, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_floordiv, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_floordiv, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(elementwise_pow, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_pow, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_pow, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(elementwise_mod, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_mod, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(elementwise_max, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_max, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_max, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(fusion_elementwise_max_activation, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(fusion_elementwise_min_activation, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_min, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_min, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_min, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(gather, kHost, kFloat, kNCHW, int32int32);
USE_LITE_KERNEL(gather, kHost, kFloat, kNCHW, int64int64);
USE_LITE_KERNEL(gather, kHost, kFloat, kNCHW, int64int32);
USE_LITE_KERNEL(gather, kHost, kFloat, kNCHW, int32int64);
USE_LITE_KERNEL(write_to_array, kHost, kAny, kAny, def);
USE_LITE_KERNEL(search_group_padding, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(gru, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(tensor_array_to_tensor, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(bilinear_interp, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(nearest_interp, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(bilinear_interp_v2, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(nearest_interp_v2, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(gru_unit, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(unfold, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(unfold, kHost, kFloat, kNCHW, def_int32);
USE_LITE_KERNEL(unfold, kHost, kFloat, kNCHW, def_int64);
USE_LITE_KERNEL(unfold, kHost, kInt8, kNCHW, def_int8);
USE_LITE_KERNEL(reshape, kHost, kAny, kAny, def);
USE_LITE_KERNEL(reshape2, kHost, kAny, kAny, def);
USE_LITE_KERNEL(flatten, kHost, kAny, kAny, def);
USE_LITE_KERNEL(flatten2, kHost, kAny, kAny, def);
USE_LITE_KERNEL(collect_fpn_proposals, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(crf_decoding, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(strided_slice, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(strided_slice, kHost, kFloat, kNCHW, def_int32);
USE_LITE_KERNEL(strided_slice, kHost, kFloat, kNCHW, def_int64);
USE_LITE_KERNEL(gaussian_random, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(gather_nd, kHost, kAny, kAny, def);
USE_LITE_KERNEL(rnn, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(box_coder, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sin, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(is_empty, kHost, kAny, kAny, def);
USE_LITE_KERNEL(sequence_arithmetic, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(search_seq_arithmetic, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(fill_constant, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(generate_proposals_v2, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(multiclass_nms, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(multiclass_nms2, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(multiclass_nms3, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(argsort, kHost, kFloat, kAny, argsort_fp32);
USE_LITE_KERNEL(argsort, kHost, kFloat, kAny, argsort_int32);
USE_LITE_KERNEL(argsort, kHost, kFloat, kAny, argsort_int64);
USE_LITE_KERNEL(shuffle_channel, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(linspace, kHost, kFloat, kAny, float32);
USE_LITE_KERNEL(linspace, kHost, kInt32, kAny, int32);
USE_LITE_KERNEL(search_fc, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(where_index, kHost, kAny, kAny, def);
USE_LITE_KERNEL(reduce_all, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_any, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(flip, kHost, kAny, kNCHW, flip_fp32);
USE_LITE_KERNEL(flip, kHost, kAny, kNCHW, flip_i64);
USE_LITE_KERNEL(unique_with_counts, kHost, kAny, kAny, def);
USE_LITE_KERNEL(box_coder, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_conv, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(layer_norm, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_mean, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_sum, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_sum, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(reduce_sum, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(reduce_prod, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_prod, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(reduce_prod, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(reduce_max, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_max, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(reduce_max, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(reduce_min, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_min, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(reduce_min, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(pool2d, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(crop, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(crop, kHost, kInt32, kAny, def);
USE_LITE_KERNEL(expand_as, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(expand_as, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(assign, kHost, kAny, kAny, def);
USE_LITE_KERNEL(assign, kHost, kAny, kAny, def_tensor_array);
USE_LITE_KERNEL(box_clip, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(gather_tree, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(gather_tree, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(one_hot, kHost, kAny, kAny, def);
USE_LITE_KERNEL(one_hot_v2, kHost, kAny, kAny, def);
USE_LITE_KERNEL(one_hot_v2, kHost, kAny, kAny, one_hot_v2_int32);
USE_LITE_KERNEL(slice, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(slice, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(slice, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(conv2d, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(depthwise_conv2d, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(conv2d, kX86, kInt8, kNCHW, int8_out);
USE_LITE_KERNEL(conv2d, kX86, kInt8, kNCHW, fp32_out);
USE_LITE_KERNEL(depthwise_conv2d, kX86, kInt8, kNCHW, int8_out);
USE_LITE_KERNEL(depthwise_conv2d, kX86, kInt8, kNCHW, fp32_out);
USE_LITE_KERNEL(sequence_expand_as, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_expand_as, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(sequence_expand_as, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(expand_v2, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(expand_v2, kHost, kFloat, kAny, def_int32);
USE_LITE_KERNEL(expand_v2, kHost, kFloat, kAny, def_int64);
USE_LITE_KERNEL(tile, kHost, kFloat, kNCHW, def_float);
USE_LITE_KERNEL(tile, kHost, kFloat, kNCHW, def_int32);
USE_LITE_KERNEL(tile, kHost, kFloat, kNCHW, def_int64);
USE_LITE_KERNEL(tile, kHost, kFloat, kNCHW, def_int8);
USE_LITE_KERNEL(tile, kHost, kFloat, kNCHW, def_bool);
USE_LITE_KERNEL(beam_search_decode, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(crop_tensor, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(crop_tensor, kHost, kFloat, kAny, int32_precision);
USE_LITE_KERNEL(sequence_topk_avg_pooling, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(top_k, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_pad, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_pad, kHost, kFloat, kNCHW, int32);
USE_LITE_KERNEL(sequence_pad, kHost, kFloat, kNCHW, int64);
USE_LITE_KERNEL(fc, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(fc, kX86, kInt8, kNCHW, int8_out);
USE_LITE_KERNEL(fc, kX86, kInt8, kNCHW, fp32_out);
USE_LITE_KERNEL(lookup_table, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(lookup_table_v2, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(density_prior_box, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_softmax, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(print, kHost, kAny, kAny, def);
USE_LITE_KERNEL(batch_norm, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(sync_batch_norm, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(mul, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(gather, kX86, kFloat, kNCHW, int32int32);
USE_LITE_KERNEL(gather, kX86, kFloat, kNCHW, int64int64);
USE_LITE_KERNEL(gather, kX86, kFloat, kNCHW, int64int32);
USE_LITE_KERNEL(gather, kX86, kFloat, kNCHW, int32int64);
USE_LITE_KERNEL(search_aligned_mat_mul, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(while, kHost, kAny, kAny, def);
USE_LITE_KERNEL(softmax, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(search_seq_softmax, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(inverse, kHost, kFloat, kNCHW, fp32);
USE_LITE_KERNEL(sampling_id, kHost, kAny, kAny, float32);
USE_LITE_KERNEL(search_attention_padding_mask, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(logical_xor, kHost, kAny, kAny, def);
USE_LITE_KERNEL(logical_and, kHost, kAny, kAny, def);
USE_LITE_KERNEL(logical_or, kHost, kAny, kAny, def);
USE_LITE_KERNEL(logical_not, kHost, kAny, kAny, def);
USE_LITE_KERNEL(where, kHost, kAny, kAny, def);
USE_LITE_KERNEL(match_matrix_tensor, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(pow, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(scale, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(scale, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(scale, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(norm, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(p_norm, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(polygon_box_transform, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(clip, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(anchor_generator, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(distribute_fpn_proposals, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(range, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(range, kHost, kInt64, kAny, def);
USE_LITE_KERNEL(range, kHost, kInt32, kAny, def);
USE_LITE_KERNEL(range, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(range, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(reverse, kHost, kAny, kNCHW, fp32);
USE_LITE_KERNEL(cos, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(conv2d_transpose, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(select_input, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(sequence_pool, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(var_conv_2d, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_mask, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_mask, kHost, kFloat, kNCHW, int32);
USE_LITE_KERNEL(sequence_mask, kHost, kFloat, kNCHW, int64);
USE_LITE_KERNEL(pad2d, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(top_k_v2, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(fill_zeros_like, kHost, kFloat, kNCHW, float32);
USE_LITE_KERNEL(fill_zeros_like, kHost, kFloat, kNCHW, int32);
USE_LITE_KERNEL(fill_zeros_like, kHost, kFloat, kNCHW, int64);
USE_LITE_KERNEL(increment, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(log_softmax, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(roi_align, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(feed, kHost, kAny, kAny, def);
USE_LITE_KERNEL(search_grnn, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(deformable_conv, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(concat, kX86, kFloat, kNCHW, def);
USE_LITE_KERNEL(concat, kX86, kFloat, kNCHW, int32);
USE_LITE_KERNEL(concat, kX86, kFloat, kNCHW, int64);
USE_LITE_KERNEL(yolo_box, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_min, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_min, kARM, kFloat, kNCHW, def_int64);
USE_LITE_KERNEL(fc, kOpenCL, kFloat, kNCHW, def);
USE_LITE_KERNEL(fc, kOpenCL, kFloat, kNCHW, pc);
USE_LITE_KERNEL(batch_norm, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(batch_norm, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(box_coder, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(box_coder, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(conv3d, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(feed, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(feed, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(feed, kMetal, kAny, kAny, def);
USE_LITE_KERNEL(box_clip, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(instance_norm, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(pool2d, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(pool2d, kCUDA, kFloat, kNHWC, def);
USE_LITE_KERNEL(layout, kFPGA, kAny, kNHWC, hwc_to_chw_fpga_fp16);
USE_LITE_KERNEL(layout, kFPGA, kAny, kNHWC, hwc_to_chw_arm_float);
USE_LITE_KERNEL(layout, kFPGA, kAny, kNHWC, chw_to_hwc_fpga_fp16);
USE_LITE_KERNEL(layout_once, kFPGA, kAny, kNHWC, hwc_to_chw_fpga_fp16);
USE_LITE_KERNEL(layout_once, kFPGA, kAny, kNHWC, chw_to_hwc_fpga_fp16);
USE_LITE_KERNEL(nearest_interp, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(nearest_interp_v2, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(__xpu__resnet_cbam, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(search_fc, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(matmul, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(matmul_v2, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(increment, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(instance_norm, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(abs, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(calib, kCUDA, kFloat, kNCHW, fp32_to_int8);
USE_LITE_KERNEL(calib, kCUDA, kFloat, kNCHW, int8_to_fp32);
USE_LITE_KERNEL(calib, kCUDA, kFloat, kNCHW, fp16_to_fp32);
USE_LITE_KERNEL(calib, kCUDA, kFloat, kNCHW, fp32_to_fp16);
USE_LITE_KERNEL(calib_once, kCUDA, kFloat, kNCHW, fp32_to_int8);
USE_LITE_KERNEL(calib_once, kCUDA, kFloat, kNCHW, int8_to_fp32);
USE_LITE_KERNEL(calib_once, kCUDA, kFloat, kNCHW, fp16_to_fp32);
USE_LITE_KERNEL(calib_once, kCUDA, kFloat, kNCHW, fp32_to_fp16);
USE_LITE_KERNEL(conv2d_transpose, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(depthwise_conv2d_transpose, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(io_copy, kCUDA, kAny, kAny, host_to_device);
USE_LITE_KERNEL(io_copy, kCUDA, kAny, kAny, device_to_host);
USE_LITE_KERNEL(io_copy_once, kCUDA, kAny, kAny, host_to_device);
USE_LITE_KERNEL(io_copy_once, kCUDA, kAny, kAny, device_to_host);
USE_LITE_KERNEL(box_coder, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(box_coder, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(equal, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(equal, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(topk_pooling, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(unstack, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(__xpu__softmax_topk, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(__xpu__mmdnn_search_attention2, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(dropout, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(__xpu__sfa_head, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(nearest_interp, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(matmul, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(matmul, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(fill_zeros_like, kXPU, kFloat, kNCHW, float32);
USE_LITE_KERNEL(fill_zeros_like, kXPU, kFloat, kNCHW, int32);
USE_LITE_KERNEL(fill_zeros_like, kXPU, kFloat, kNCHW, int64);
USE_LITE_KERNEL(match_matrix_tensor, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(clip, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(flatten_contiguous_range, kXPU, kAny, kAny, def);
USE_LITE_KERNEL(split, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(split, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(elementwise_add, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_sub, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_add, kCUDA, kFloat, kNHWC, nhwc_format);
USE_LITE_KERNEL(elementwise_sub, kCUDA, kFloat, kNHWC, nhwc_format);
USE_LITE_KERNEL(elementwise_mul, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_mul, kCUDA, kFloat, kNHWC, nhwc_format);
USE_LITE_KERNEL(fusion_elementwise_add_activation, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(fusion_elementwise_add_activation, kCUDA, kFloat, kNHWC, nhwc_format);
USE_LITE_KERNEL(fusion_elementwise_sub_activation, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(fusion_elementwise_sub_activation, kCUDA, kFloat, kNHWC, nhwc_format);
USE_LITE_KERNEL(fusion_elementwise_mul_activation, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(fusion_elementwise_mul_activation, kCUDA, kFloat, kNHWC, nhwc_format);
USE_LITE_KERNEL(elementwise_add, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_add, kXPU, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_add, kXPU, kFloat, kNCHW, int64);
USE_LITE_KERNEL(elementwise_sub, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_mul, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_mul, kXPU, kFloat, kNCHW, int64);
USE_LITE_KERNEL(elementwise_div, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_max, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_max, kXPU, kFloat, kNCHW, int32);
USE_LITE_KERNEL(pad3d, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(bilinear_interp, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(nearest_interp, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(bilinear_interp_v2, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(nearest_interp_v2, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(bilinear_interp, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(nearest_interp, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(bilinear_interp_v2, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(nearest_interp_v2, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(depthwise_conv2d_transpose, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(depthwise_conv2d_transpose, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(depthwise_conv2d_transpose, kARM, kInt8, kNCHW, fp32_out);
USE_LITE_KERNEL(depthwise_conv2d_transpose, kARM, kInt8, kNCHW, int8_out);
USE_LITE_KERNEL(sequence_reverse, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_reverse, kXPU, kFloat, kNCHW, int32);
USE_LITE_KERNEL(sequence_reverse, kXPU, kFloat, kNCHW, int64);
USE_LITE_KERNEL(layout, kCUDA, kFloat, kNCHW, nchw2nhwc);
USE_LITE_KERNEL(layout, kCUDA, kFloat, kNCHW, nhwc2nchw);
USE_LITE_KERNEL(layout, kCUDA, kInt8, kNCHW, int8_nchw2nhwc);
USE_LITE_KERNEL(layout, kCUDA, kInt8, kNCHW, int8_nhwc2nchw);
USE_LITE_KERNEL(layout_once, kCUDA, kFloat, kNCHW, nchw2nhwc);
USE_LITE_KERNEL(layout_once, kCUDA, kFloat, kNCHW, nhwc2nchw);
USE_LITE_KERNEL(layout_once, kCUDA, kInt8, kNCHW, int8_nchw2nhwc);
USE_LITE_KERNEL(layout_once, kCUDA, kInt8, kNCHW, int8_nhwc2nchw);
USE_LITE_KERNEL(__xpu__squeeze_excitation_block, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(io_copy, kOpenCL, kAny, kAny, host_to_device);
USE_LITE_KERNEL(io_copy, kOpenCL, kAny, kAny, device_to_host);
USE_LITE_KERNEL(io_copy_once, kOpenCL, kAny, kAny, host_to_device);
USE_LITE_KERNEL(io_copy_once, kOpenCL, kAny, kAny, device_to_host);
USE_LITE_KERNEL(lrn, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_prod, kARM, kInt32, kNCHW, def);
USE_LITE_KERNEL(reduce_prod, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_prod, kARM, kFloat, kNCHW, reduce_prod_i64);
USE_LITE_KERNEL(reduce_prod, kARM, kFloat, kNCHW, int32);
USE_LITE_KERNEL(tanh, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(shuffle_channel, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kImageDefault, NCHW_to_ImageDefault);
USE_LITE_KERNEL(layout_once, kOpenCL, kAny, kImageDefault, NCHW_to_ImageDefault);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kNCHW, ImageDefault_to_NCHW);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kImageFolder, NCHW_to_ImageFolder);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kNCHW, def);
USE_LITE_KERNEL(layout_once, kOpenCL, kAny, kNCHW, ImageDefault_to_NCHW);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kImageFolder, ImageDefault_to_ImageFolder);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kImageDefault, ImageFolder_to_ImageDefault);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kNCHW, ImageFolder_to_NCHW);
USE_LITE_KERNEL(pad_constant_like, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(yolo_box, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(yolo_box, kFPGA, kFP16, kNHWC, def_float_size);
USE_LITE_KERNEL(conv2d_transpose, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(matmul, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(matmul, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(matmul_v2, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(matmul_v2, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(bilinear_interp, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(squeeze, kOpenCL, kAny, kNCHW, def);
USE_LITE_KERNEL(squeeze2, kOpenCL, kAny, kNCHW, def);
USE_LITE_KERNEL(unsqueeze, kOpenCL, kAny, kNCHW, def);
USE_LITE_KERNEL(unsqueeze2, kOpenCL, kAny, kNCHW, def);
USE_LITE_KERNEL(cast, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(cast, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(__xpu__multi_encoder, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_topk_avg_pooling, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(lookup_table, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(lookup_table_v2, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(fc, kOpenCL, kFP16, kImageFolder, image2d);
USE_LITE_KERNEL(conv2d_transpose, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(conv2d_transpose, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(softmax, kOpenCL, kFP16, kImageFolder, def);
USE_LITE_KERNEL(sum, kARM, kFloat, kNCHW, sum_i32);
USE_LITE_KERNEL(sum, kARM, kFloat, kNCHW, sum_i64);
USE_LITE_KERNEL(sum, kARM, kFloat, kNCHW, sum_fp32);
USE_LITE_KERNEL(expand_v2, kXPU, kFloat, kAny, def);
USE_LITE_KERNEL(relu, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(sigmoid, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(scale, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(lookup_table, kARM, kAny, kNCHW, def);
USE_LITE_KERNEL(lookup_table_v2, kARM, kAny, kNCHW, def);
USE_LITE_KERNEL(gather, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(fill_constant_batch_size_like, kXPU, kAny, kNCHW, def);
USE_LITE_KERNEL(matmul_v2, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(matmul_v2, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(matmul_v2, kARM, kInt8, kNCHW, def);
USE_LITE_KERNEL(sequence_topk_avg_pooling, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(softmax, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(softmax, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(pool2d, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(pool2d, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(softmax, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(softmax, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(search_seq_softmax, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(search_seq_softmax, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(bilinear_interp, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(bilinear_interp_v2, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(__xpu__conv2d, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(__xpu__conv2d, kXPU, kInt8, kNCHW, def);
USE_LITE_KERNEL(split, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(softmax, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(assign_value, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(split, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(scale, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_unpad, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_unpad, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(norm, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(gather, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(gather, kXPU, kFloat, kNCHW, gather_float_i64);
USE_LITE_KERNEL(gather, kXPU, kFloat, kNCHW, gather_i32_i32);
USE_LITE_KERNEL(gather, kXPU, kFloat, kNCHW, gather_i32_i64);
USE_LITE_KERNEL(gather, kXPU, kFloat, kNCHW, gather_i64_i32);
USE_LITE_KERNEL(conv2d, kIntelFPGA, kFloat, kNCHW, def);
USE_LITE_KERNEL(depthwise_conv2d, kIntelFPGA, kFloat, kNCHW, def);
USE_LITE_KERNEL(conv2d_transpose, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(conv2d_transpose, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(conv2d_transpose, kARM, kInt8, kNCHW, fp32_out);
USE_LITE_KERNEL(conv2d_transpose, kARM, kInt8, kNCHW, int8_out);
USE_LITE_KERNEL(relu, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(relu6, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(gelu, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(tanh, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(sigmoid, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(abs, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(exp, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(square, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(sqrt, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(rsqrt, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(pow, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(log, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(sign, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reciprocal, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(hard_sigmoid, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(hard_swish, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(leaky_relu, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(softsign, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(swish, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(prelu, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(search_fc, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(arg_max, kMetal, kFloat, kMetalTexture2DArray, Int32);
USE_LITE_KERNEL(arg_max, kMetal, kFloat, kMetalTexture2DArray, Int64);
USE_LITE_KERNEL(sequence_pool, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(sequence_pool, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(logical_and, kXPU, kFloat, kAny, def);
USE_LITE_KERNEL(logical_not, kXPU, kFloat, kAny, def);
USE_LITE_KERNEL(pad2d, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_all, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_any, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_mean, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_sum, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_prod, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_max, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_min, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(arg_max, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(pixel_shuffle, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(pixel_shuffle, kXPU, kFP16, kNCHW, def);
USE_LITE_KERNEL(layer_norm, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(batch_norm, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(batch_norm, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(sync_batch_norm, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(dropout, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(calib, kARM, kFP16, kNCHW, fp16_to_fp32);
USE_LITE_KERNEL(calib, kARM, kFP16, kNCHW, fp32_to_fp16);
USE_LITE_KERNEL(calib_once, kARM, kFP16, kNCHW, fp16_to_fp32);
USE_LITE_KERNEL(calib_once, kARM, kFP16, kNCHW, fp32_to_fp16);
USE_LITE_KERNEL(calib, kARM, kInt8, kNCHW, fp32_to_int8);
USE_LITE_KERNEL(calib, kARM, kInt32, kNCHW, int32_to_fp32);
USE_LITE_KERNEL(calib, kARM, kInt32, kNCHW, int32_to_int64);
USE_LITE_KERNEL(calib, kARM, kInt32, kNCHW, fp32_to_int32);
USE_LITE_KERNEL(calib, kARM, kInt64, kNCHW, int64_to_fp32);
USE_LITE_KERNEL(calib, kARM, kInt64, kNCHW, fp32_to_int64);
USE_LITE_KERNEL(calib, kARM, kInt8, kNCHW, int8_to_fp32);
USE_LITE_KERNEL(calib, kARM, kInt64, kNCHW, int64_to_int32);
USE_LITE_KERNEL(calib_once, kARM, kInt8, kNCHW, fp32_to_int8);
USE_LITE_KERNEL(calib_once, kARM, kInt8, kNCHW, int8_to_fp32);
USE_LITE_KERNEL(calib_once, kARM, kInt64, kNCHW, int64_to_int32);
USE_LITE_KERNEL(yolo_box, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(io_copy, kFPGA, kAny, kAny, host_to_device);
USE_LITE_KERNEL(io_copy, kFPGA, kAny, kAny, host_float_chw_to_device_fp16_hwc);
USE_LITE_KERNEL(io_copy_once, kFPGA, kAny, kAny, host_float_chw_to_device_fp16_hwc);
USE_LITE_KERNEL(io_copy, kFPGA, kAny, kAny, device_to_host_chw);
USE_LITE_KERNEL(io_copy_once, kFPGA, kAny, kAny, device_to_host_chw);
USE_LITE_KERNEL(io_copy, kFPGA, kAny, kAny, device_to_host_hwc_chw);
USE_LITE_KERNEL(io_copy_once, kFPGA, kAny, kAny, device_to_host_hwc_chw);
USE_LITE_KERNEL(transpose, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(transpose2, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(density_prior_box, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(top_k, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(io_copy, kXPU, kAny, kAny, host_to_device);
USE_LITE_KERNEL(io_copy, kXPU, kAny, kAny, device_to_host);
USE_LITE_KERNEL(io_copy_once, kXPU, kAny, kAny, host_to_device);
USE_LITE_KERNEL(io_copy_once, kXPU, kAny, kAny, device_to_host);
USE_LITE_KERNEL(lrn, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(scale, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(scale, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(sequence_concat, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(search_grnn, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(box_coder, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(rnn, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(grid_sampler, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(lookup_table_dequant, kARM, kAny, kNCHW, def);
USE_LITE_KERNEL(__xpu__multi_softmax, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(fc, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(fc, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(fc, kARM, kInt8, kNCHW, int8out);
USE_LITE_KERNEL(fc, kARM, kInt8, kNCHW, fp32out);
USE_LITE_KERNEL(conv2d, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(depthwise_conv2d, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(conv2d, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(depthwise_conv2d, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(conv2d, kARM, kInt8, kNCHW, int8_out);
USE_LITE_KERNEL(conv2d, kARM, kInt8, kNCHW, fp32_out);
USE_LITE_KERNEL(depthwise_conv2d, kARM, kInt8, kNCHW, int8_out);
USE_LITE_KERNEL(depthwise_conv2d, kARM, kInt8, kNCHW, fp32_out);
USE_LITE_KERNEL(bilinear_interp, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(bilinear_interp_v2, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(nearest_interp, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(nearest_interp_v2, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_add, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(fusion_elementwise_add_activation, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(elementwise_mul, kFPGA, kFP16, kNHWC, ew_mul_fpga);
USE_LITE_KERNEL(elementwise_mul, kFPGA, kFP16, kNHWC, ew_mul_y_arm);
USE_LITE_KERNEL(cast, kXPU, kAny, kNCHW, cast_fp32);
USE_LITE_KERNEL(cast, kXPU, kAny, kNCHW, cast_i32);
USE_LITE_KERNEL(cast, kXPU, kAny, kNCHW, cast_i64);
USE_LITE_KERNEL(var_conv_2d, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(pool2d, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(pool2d, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(layer_norm, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(fc, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(fc, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(less_than, kXPU, kFloat, kAny, def);
USE_LITE_KERNEL(less_than, kXPU, kFloat, kAny, int32);
USE_LITE_KERNEL(less_than, kXPU, kFloat, kAny, int64);
USE_LITE_KERNEL(affine_channel, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(__xpu__fc, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(matmul, kOpenCL, kFP16, kImageFolder, image2d_host);
USE_LITE_KERNEL(matmul, kOpenCL, kFP16, kImageFolder, image2d);
USE_LITE_KERNEL(matmul_v2, kOpenCL, kFP16, kImageFolder, image2d);
USE_LITE_KERNEL(matmul_v2, kOpenCL, kFP16, kImageFolder, image2d_host);
USE_LITE_KERNEL(yolo_box, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(yolo_box, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(gru, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(gru, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(gru, kARM, kInt8, kNCHW, def);
USE_LITE_KERNEL(is_empty, kXPU, kAny, kAny, def);
USE_LITE_KERNEL(matmul, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(matmul, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(matmul, kARM, kInt8, kNCHW, def);
USE_LITE_KERNEL(hard_sigmoid, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(hard_swish, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(relu_clipped, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(swish, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(log, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(exp, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(floor, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(hard_sigmoid, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(sqrt, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(rsqrt, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(square, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(hard_swish, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(reciprocal, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(abs, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(gelu, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(erf, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(sign, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(softplus, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(mish, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_unpad, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_unpad, kXPU, kFloat, kAny, int64);
USE_LITE_KERNEL(multiclass_nms, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(multiclass_nms2, kFPGA, kFP16, kNHWC, def2);
USE_LITE_KERNEL(elementwise_div, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_add, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_sub, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_mul, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_max, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_min, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_pow, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_mod, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(fusion_elementwise_add_activation, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(fusion_elementwise_sub_activation, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(fusion_elementwise_mul_activation, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(fusion_elementwise_div_activation, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_floordiv, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(transpose, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(transpose2, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(transpose, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(transpose2, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(mul, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(mul, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(read_from_array, kXPU, kAny, kAny, def);
USE_LITE_KERNEL(dropout, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(assign, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(assign, kXPU, kFloat, kNCHW, int32);
USE_LITE_KERNEL(assign, kXPU, kFloat, kNCHW, int64);
USE_LITE_KERNEL(assign, kXPU, kFloat, kNCHW, bool);
USE_LITE_KERNEL(affine_grid, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(io_copy, kMetal, kFloat, kMetalTexture2DArray, host_to_device_image);
USE_LITE_KERNEL(io_copy, kMetal, kFloat, kMetalTexture2DArray, device_image_to_host);
USE_LITE_KERNEL(io_copy_once, kMetal, kFloat, kMetalTexture2DArray, host_to_device_image);
USE_LITE_KERNEL(io_copy_once, kMetal, kFloat, kMetalTexture2DArray, device_image_to_host);
USE_LITE_KERNEL(elementwise_add, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(elementwise_add, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(fusion_elementwise_add_activation, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(fusion_elementwise_add_activation, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(elementwise_div, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(elementwise_div, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(elementwise_mul, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(elementwise_mul, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(elementwise_sub, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(elementwise_sub, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(elementwise_add, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(fusion_elementwise_add_activation, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(elementwise_mul, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(fusion_elementwise_mul_activation, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(elementwise_sub, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(fusion_elementwise_sub_activation, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(elementwise_div, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(fusion_elementwise_div_activation, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(elementwise_add, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_add, kARM, kInt32, kNCHW, def);
USE_LITE_KERNEL(elementwise_add, kARM, kInt64, kNCHW, def);
USE_LITE_KERNEL(elementwise_add, kARM, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_add, kARM, kFloat, kNCHW, int64);
USE_LITE_KERNEL(fusion_elementwise_add_activation, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_sub, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_sub, kARM, kInt32, kNCHW, def);
USE_LITE_KERNEL(elementwise_sub, kARM, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_sub, kARM, kFloat, kNCHW, int64);
USE_LITE_KERNEL(fusion_elementwise_sub_activation, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_mul, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_mul, kARM, kInt32, kNCHW, def);
USE_LITE_KERNEL(elementwise_mul, kARM, kInt64, kNCHW, def);
USE_LITE_KERNEL(elementwise_mul, kARM, kFloat, kNCHW, int32);
USE_LITE_KERNEL(elementwise_mul, kARM, kFloat, kNCHW, int64);
USE_LITE_KERNEL(fusion_elementwise_mul_activation, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(fusion_elementwise_mul_activation, kARM, kInt64, kNCHW, def);
USE_LITE_KERNEL(elementwise_max, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(fusion_elementwise_max_activation, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_min, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(fusion_elementwise_min_activation, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_div, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_div, kARM, kInt32, kNCHW, def);
USE_LITE_KERNEL(elementwise_div, kARM, kInt64, kNCHW, def);
USE_LITE_KERNEL(fusion_elementwise_div_activation, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_mod, kARM, kInt64, kNCHW, def);
USE_LITE_KERNEL(elementwise_mod, kARM, kFloat, kNCHW, int64);
USE_LITE_KERNEL(elementwise_mod, kARM, kFloat, kNCHW, int32_mod);
USE_LITE_KERNEL(elementwise_pow, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_pow, kARM, kInt32, kNCHW, def);
USE_LITE_KERNEL(elementwise_floordiv, kARM, kInt32, kNCHW, def);
USE_LITE_KERNEL(elementwise_floordiv, kARM, kInt64, kNCHW, def);
USE_LITE_KERNEL(elementwise_floordiv, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_floordiv, kARM, kFloat, kNCHW, int64);
USE_LITE_KERNEL(slice, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(slice, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(search_aligned_mat_mul, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(gru, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(gru, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(split, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(pool2d, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(max_pool2d_with_index, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_mask, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_mask, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(matmul, kOpenCL, kFloat, kNCHW, def);
USE_LITE_KERNEL(matmul_v2, kOpenCL, kFloat, kNCHW, def);
USE_LITE_KERNEL(scale, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(pool2d, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(sequence_reverse_embedding, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(reshape2, kXPU, kFloat, kNCHW, float32);
USE_LITE_KERNEL(reshape2, kXPU, kFloat, kNCHW, int32);
USE_LITE_KERNEL(reshape2, kXPU, kFloat, kNCHW, int64);
USE_LITE_KERNEL(reshape, kXPU, kFloat, kNCHW, float32);
USE_LITE_KERNEL(flatten, kXPU, kFloat, kNCHW, float32);
USE_LITE_KERNEL(flatten2, kXPU, kFloat, kNCHW, float32);
USE_LITE_KERNEL(gru, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(roi_align, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(transpose, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(transpose, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(transpose2, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(transpose2, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(batch_norm, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(sync_batch_norm, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(clip, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(generate_proposals, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(conv2d, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(conv2d, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(depthwise_conv2d, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(depthwise_conv2d, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(conv2d, kCUDA, kInt8, kNHWC, fp32_out);
USE_LITE_KERNEL(conv2d, kCUDA, kInt8, kNHWC, int8_out);
USE_LITE_KERNEL(unsqueeze, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(unsqueeze2, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(relu, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(prelu, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(tanh, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(relu, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(leaky_relu, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(prelu, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(sigmoid, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(tanh, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(relu6, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(thresholded_relu, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(elu, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_max, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(max, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(mul, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(var_conv_2d, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(var_conv_2d, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(gru_unit, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(scale, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(scale, kXPU, kFloat, kNCHW, int32);
USE_LITE_KERNEL(axpy, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(split_lod_tensor, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_max, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_max, kARM, kFloat, kNCHW, i64);
USE_LITE_KERNEL(expand, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(scale, kARM, kFloat, kNCHW, int32);
USE_LITE_KERNEL(scale, kARM, kFloat, kNCHW, int64);
USE_LITE_KERNEL(scale, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(scale, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(scale, kARM, kInt32, kNCHW, def);
USE_LITE_KERNEL(scale, kARM, kInt64, kNCHW, def);
USE_LITE_KERNEL(slice, kXPU, kFloat, kAny, def);
USE_LITE_KERNEL(slice, kXPU, kFloat, kAny, int32);
USE_LITE_KERNEL(slice, kXPU, kFloat, kAny, int64);
USE_LITE_KERNEL(__xpu__generate_sequence, kXPU, kAny, kNCHW, def);
USE_LITE_KERNEL(dropout, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(lookup_table, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(lookup_table_v2, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(gru_unit, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(feed, kCUDA, kFloat, kNCHW, nchw);
USE_LITE_KERNEL(feed, kCUDA, kFloat, kNHWC, nhwc);
USE_LITE_KERNEL(feed, kCUDA, kInt64, kNCHW, nchw);
USE_LITE_KERNEL(feed, kCUDA, kInt64, kNHWC, nhwc);
USE_LITE_KERNEL(feed, kCUDA, kInt32, kNCHW, nchw);
USE_LITE_KERNEL(feed, kCUDA, kInt32, kNHWC, nhwc);
USE_LITE_KERNEL(shape, kOpenCL, kAny, kAny, def);
USE_LITE_KERNEL(greater_than, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(fetch, kFPGA, kFP16, kNHWC, host_host);
USE_LITE_KERNEL(negative, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(subgraph, kNPU, kAny, kNCHW, def);
USE_LITE_KERNEL(yolo_box, kOpenCL, kAny, kNCHW, def);
USE_LITE_KERNEL(exp, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(exp, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(pixel_shuffle, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(batch_norm, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(transpose, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(transpose2, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(concat, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(concat, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(dropout, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(subgraph, kNNAdapter, kAny, kNCHW, def);
USE_LITE_KERNEL(decode_bboxes, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(leaky_relu, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(__xpu__bigru, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(relu, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(search_attention_padding_mask, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(pool2d, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(instance_norm, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(calib, kMLU, kInt8, kNCHW, fp32_to_int8);
USE_LITE_KERNEL(calib, kMLU, kInt8, kNCHW, int8_to_fp32);
USE_LITE_KERNEL(calib_once, kMLU, kInt8, kNCHW, fp32_to_int8);
USE_LITE_KERNEL(calib_once, kMLU, kInt8, kNCHW, int8_to_fp32);
USE_LITE_KERNEL(prior_box, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(batch_norm, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_concat, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(reshape, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(reshape2, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(flatten, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(flatten2, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(calib, kFPGA, kFP16, kNHWC, fp32_to_fp16_fpga);
USE_LITE_KERNEL(calib_once, kFPGA, kFP16, kNHWC, fp32_to_fp16_fpga);
USE_LITE_KERNEL(calib, kFPGA, kFP16, kNHWC, float_2_int_fpga);
USE_LITE_KERNEL(calib_once, kFPGA, kFP16, kNHWC, float_2_int_fpga);
USE_LITE_KERNEL(calib, kFPGA, kFP16, kNHWC, float_to_int_fpga);
USE_LITE_KERNEL(calib_once, kFPGA, kFP16, kNHWC, fp16_to_fp32_fpga);
USE_LITE_KERNEL(calib, kFPGA, kFP16, kNHWC, int64_2_float_fpga);
USE_LITE_KERNEL(calib_once, kFPGA, kFP16, kNHWC, int64_2_float_fpga);
USE_LITE_KERNEL(match_matrix_tensor, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(slice, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(calib, kXPU, kFloat, kNCHW, int64_to_int32);
USE_LITE_KERNEL(calib, kXPU, kFloat, kNCHW, int32_to_int64);
USE_LITE_KERNEL(calib_once, kXPU, kFloat, kNCHW, int64_to_int32);
USE_LITE_KERNEL(calib_once, kXPU, kFloat, kNCHW, int32_to_int64);
USE_LITE_KERNEL(transpose, kARM, kAny, kNCHW, def);
USE_LITE_KERNEL(transpose2, kARM, kAny, kNCHW, def);
USE_LITE_KERNEL(sigmoid, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(sigmoid, kCUDA, kFP16, kNCHW, def);
USE_LITE_KERNEL(conv2d, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(depthwise_conv2d, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(fc, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(fc, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(__xpu__logit, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(shape, kXPU, kAny, kAny, xpu_shape);
USE_LITE_KERNEL(lrn, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(rnn, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(io_copy, kMLU, kFloat, kNHWC, host_to_device_kFloat);
USE_LITE_KERNEL(io_copy, kMLU, kFP16, kNHWC, host_to_device_kFP16);
USE_LITE_KERNEL(io_copy, kMLU, kInt32, kNHWC, host_to_device_kInt32);
USE_LITE_KERNEL(io_copy, kMLU, kFloat, kNHWC, device_to_host_kFloat);
USE_LITE_KERNEL(io_copy, kMLU, kFP16, kNHWC, device_to_host_kFP16);
USE_LITE_KERNEL(io_copy, kMLU, kInt8, kNHWC, host_to_device_to_kInt8);
USE_LITE_KERNEL(sin, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(cos, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(tan, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(atan, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(asin, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(acos, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(concat, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(box_coder, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(subgraph, kMLU, kFloat, kNHWC, def_kFloat);
USE_LITE_KERNEL(subgraph, kMLU, kFP16, kNHWC, def_FP16);
USE_LITE_KERNEL(dropout, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(dropout, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(arg_max, kARM, kAny, kNCHW, fp32);
USE_LITE_KERNEL(arg_max, kARM, kAny, kNCHW, int64);
USE_LITE_KERNEL(arg_max, kARM, kAny, kNCHW, int32);
USE_LITE_KERNEL(arg_max, kARM, kAny, kNCHW, int16);
USE_LITE_KERNEL(arg_max, kARM, kAny, kNCHW, uint8);
USE_LITE_KERNEL(mean, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(slice, kOpenCL, kFloat, kNCHW, def);
USE_LITE_KERNEL(slice, kOpenCL, kInt32, kNCHW, def);
USE_LITE_KERNEL(slice, kOpenCL, kInt64, kNCHW, def);
USE_LITE_KERNEL(softmax, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(softmax, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_conv, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(sequence_conv, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(anchor_generator, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(transpose, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(transpose2, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(transpose2, kXPU, kFloat, kNCHW, def_int64);
USE_LITE_KERNEL(shuffle_channel, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(shuffle_channel, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(clip, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(sequence_pool, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(fill_any_like, kXPU, kAny, kNCHW, def);
USE_LITE_KERNEL(deformable_conv, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_mean, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(concat, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(concat, kXPU, kFloat, kNCHW, concat_i32);
USE_LITE_KERNEL(concat, kXPU, kFloat, kNCHW, concat_i64);
USE_LITE_KERNEL(concat, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_mean, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(conv2d, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(depthwise_conv2d, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(conv2d, kOpenCL, kFP16, kImageDefault, image2d_pc);
USE_LITE_KERNEL(depthwise_conv2d, kOpenCL, kFP16, kImageDefault, image2d_pc);
USE_LITE_KERNEL(fc, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(fill_constant, kXPU, kAny, kNCHW, def);
USE_LITE_KERNEL(squeeze, kXPU, kAny, kAny, def);
USE_LITE_KERNEL(squeeze2, kXPU, kAny, kAny, def);
USE_LITE_KERNEL(search_group_padding, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(layout, kARM, kFloat, kNCHW, nchw2nhwc);
USE_LITE_KERNEL(layout, kARM, kFloat, kNCHW, nhwc2nchw);
USE_LITE_KERNEL(layout, kARM, kInt8, kNCHW, int8_nchw2nhwc);
USE_LITE_KERNEL(layout, kARM, kInt8, kNCHW, int8_nhwc2nchw);
USE_LITE_KERNEL(layout_once, kARM, kFloat, kNCHW, nchw2nhwc);
USE_LITE_KERNEL(layout_once, kARM, kFloat, kNCHW, nhwc2nchw);
USE_LITE_KERNEL(layout_once, kARM, kInt8, kNCHW, int8_nchw2nhwc);
USE_LITE_KERNEL(layout_once, kARM, kInt8, kNCHW, int8_nhwc2nchw);
USE_LITE_KERNEL(leaky_relu, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(swish, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(exp, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(tanh, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(relu, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(abs, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(relu6, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(sigmoid, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(hard_sigmoid, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(hard_swish, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(gelu, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(prelu, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(sqrt, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(rsqrt, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(square, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(log, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(shape, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(sequence_expand_as, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_expand_as, kARM, kFloat, kNCHW, int32);
USE_LITE_KERNEL(sequence_expand_as, kARM, kFloat, kNCHW, int64);
USE_LITE_KERNEL(sequence_pool_concat, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(concat, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(fpga_conv2d, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(conv2d, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(depthwise_conv2d, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(norm, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(norm, kXPU, kFloat, kNCHW, l2_norm_fp16);
USE_LITE_KERNEL(concat, kARM, kAny, kNCHW, def);
USE_LITE_KERNEL(mul, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(mul, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(mul, kARM, kInt8, kNCHW, def);
USE_LITE_KERNEL(conv2d, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(conv2d, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(conv2d_transpose, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(lod_array_length, kXPU, kAny, kAny, def);
USE_LITE_KERNEL(prior_box, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(cast, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(pad2d, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(pad2d, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(arg_max, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(write_to_array, kXPU, kAny, kAny, def);
USE_LITE_KERNEL(search_seq_depadding, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(unsqueeze, kXPU, kAny, kAny, def);
USE_LITE_KERNEL(unsqueeze2, kXPU, kAny, kAny, def);
USE_LITE_KERNEL(max, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(reduce_max, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(reduce_min, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(reduce_sum, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(reduce_mean, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(bilinear_interp, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(nearest_interp, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(search_seq_fc, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(depthwise_conv2d, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(depthwise_conv2d, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(relu, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(relu6, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(leaky_relu, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(relu, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(relu6, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(leaky_relu, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(sigmoid, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(sigmoid, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(swish, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(swish, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(hard_sigmoid, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(hard_sigmoid, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(hard_swish, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(hard_swish, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(pow, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(sum, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_mask, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(search_grnn, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(__xpu__dynamic_lstm_fuse_op, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_mean, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(sequence_arithmetic, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(search_seq_arithmetic, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_sum, kARM, kFloat, kNCHW, def_int32);
USE_LITE_KERNEL(reduce_sum, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(sparse_conv2d, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(sparse_conv2d, kARM, kInt8, kNCHW, int8_fp32_out);
USE_LITE_KERNEL(sparse_conv2d, kARM, kInt8, kNCHW, int8_int8_out);
USE_LITE_KERNEL(slice, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(slice, kARM, kFloat, kNCHW, array_def);
USE_LITE_KERNEL(slice, kARM, kFloat, kNCHW, float_i64_starts_ends);
USE_LITE_KERNEL(slice, kARM, kFloat, kNCHW, array_float_i64_starts_ends);
USE_LITE_KERNEL(slice, kARM, kFloat, kNCHW, bool_slice);
USE_LITE_KERNEL(slice, kARM, kFloat, kNCHW, array_bool_slice);
USE_LITE_KERNEL(slice, kARM, kFloat, kNCHW, int32_slice);
USE_LITE_KERNEL(slice, kARM, kFloat, kNCHW, array_int32_slice);
USE_LITE_KERNEL(slice, kARM, kFloat, kNCHW, def_int64);
USE_LITE_KERNEL(slice, kARM, kFloat, kNCHW, array_def_int64);
USE_LITE_KERNEL(grid_sampler, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(gru, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(layout, kX86, kFloat, kNCHW, def_layout_nhwc2nchw_fp32);
USE_LITE_KERNEL(layout, kX86, kFP16, kNCHW, def_layout_nhwc2nchw_fp16);
USE_LITE_KERNEL(layout, kX86, kFloat, kNCHW, def_layout_nchw2nhwc_fp32);
USE_LITE_KERNEL(layout, kX86, kFP16, kNCHW, def_layout_nchw2nhwc_fp16);
USE_LITE_KERNEL(layout, kX86, kInt8, kNCHW, def_layout_nchw2nhwc_int8);
USE_LITE_KERNEL(stack, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_reverse, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_reverse, kCUDA, kInt64, kNCHW, def);
USE_LITE_KERNEL(__xpu__mmdnn_bid_emb_grnn_att, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(__xpu__mmdnn_bid_emb_grnn_att2, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(__xpu__mmdnn_bid_emb_att, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(__xpu__mmdnn_match_conv_topk, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(__xpu__mmdnn_merge_all, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(scatter, kARM, kFloat, kNCHW, ids_int64);
USE_LITE_KERNEL(scatter, kARM, kFloat, kNCHW, ids_int32);
USE_LITE_KERNEL(feed, kFPGA, kFP16, kNHWC, def);
USE_LITE_KERNEL(feed, kFPGA, kFP16, kNHWC, feed_int32);
USE_LITE_KERNEL(assign_value, kXPU, kAny, kNCHW, def);
USE_LITE_KERNEL(sequence_pad, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reshape, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(reshape, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(reshape2, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(reshape2, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(flatten, kMetal, kFloat, kMetalTexture2DArray, image2d);
USE_LITE_KERNEL(flatten, kMetal, kFP16, kMetalTexture2DArray, image2d);
USE_LITE_KERNEL(flatten2, kMetal, kFloat, kMetalTexture2DArray, image2d);
USE_LITE_KERNEL(flatten2, kMetal, kFP16, kMetalTexture2DArray, image2d);
USE_LITE_KERNEL(__xpu__resnet50, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(grid_sampler, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(__xpu__mmdnn_search_attention, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(fetch, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(bilinear_interp, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(bilinear_interp, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(bilinear_interp_v2, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(bilinear_interp_v2, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(nearest_interp, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(nearest_interp, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(nearest_interp_v2, kMetal, kFloat, kMetalTexture2DArray, def);
USE_LITE_KERNEL(nearest_interp_v2, kMetal, kFP16, kMetalTexture2DArray, def);
USE_LITE_KERNEL(pixel_shuffle, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(subgraph, kFPGA, kAny, kNHWC, def);
USE_LITE_KERNEL(sequence_arithmetic, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(search_seq_arithmetic, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(group_norm, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(pad2d, kARM, kFP16, kNCHW, def);
USE_LITE_KERNEL(pad2d, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(correlation, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(im2sequence, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(reshape, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(reshape2, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(flatten, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(flatten2, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(layer_norm, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(sequence_pool, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(pad2d, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(lstm, kARM, kFloat, kNCHW, def);
USE_LITE_KERNEL(lstm, kARM, kInt8, kNCHW, def);
USE_LITE_KERNEL(__xpu__embedding_with_eltwise_add, kXPU, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_pad, kCUDA, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_pad, kCUDA, kFP16, kNCHW, def);